{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectFields = void 0;\n\nconst _ = require(\"lodash\");\n\nexports.selectFields = (req, fields, locations) => _(fields).flatMap(field => _.flatMap(locations, location => {\n  return expandField(req, field, location);\n})) // Avoid duplicates if multiple field selections would return the same field twice.\n// E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n// the instance bla.foo would appear twice, and baz.foo once.\n.uniqWith(isSameFieldInstance).value();\n\nfunction isSameFieldInstance(a, b) {\n  return a.path === b.path && a.location === b.location;\n}\n\nfunction expandField(req, field, location) {\n  const originalPath = field;\n  const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n  const paths = [];\n  expandPath(req[location], pathToExpand, paths);\n  return paths.map(path => {\n    const value = path === '' ? req[location] : _.get(req[location], path);\n    return {\n      location,\n      path,\n      originalPath,\n      value,\n      originalValue: value\n    };\n  });\n}\n\nfunction expandPath(object, path, accumulator) {\n  const segments = _.toPath(path);\n\n  const wildcardPos = segments.indexOf('*');\n\n  if (wildcardPos > -1) {\n    const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n\n    if (!subObject || !_.isObjectLike(subObject)) {\n      return;\n    }\n\n    Object.keys(subObject).map(key => segments // Before the *\n    .slice(0, wildcardPos) // The part that the * matched\n    .concat(key) // After the *\n    .concat(segments.slice(wildcardPos + 1))).forEach(subPath => {\n      expandPath(object, subPath, accumulator);\n    });\n  } else {\n    const reconstructedPath = segments.reduce((prev, segment) => {\n      let part = ''; // TODO: Handle brackets?\n\n      if (segment.includes('.')) {\n        // Special char key access\n        part = `[\"${segment}\"]`;\n      } else if (/^\\d+$/.test(segment)) {\n        // Index access\n        part = `[${segment}]`;\n      } else if (prev) {\n        // Object key access\n        part = `.${segment}`;\n      } else {\n        // Top level key\n        part = segment;\n      }\n\n      return prev + part;\n    }, '');\n    accumulator.push(reconstructedPath);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","selectFields","_","require","req","fields","locations","flatMap","field","location","expandField","uniqWith","isSameFieldInstance","a","b","path","originalPath","pathToExpand","toLowerCase","paths","expandPath","map","get","originalValue","object","accumulator","segments","toPath","wildcardPos","indexOf","subObject","slice","isObjectLike","keys","key","concat","forEach","subPath","reconstructedPath","reduce","prev","segment","part","includes","test","push"],"sources":["/Users/logee/Documents/Codes/fms/node_modules/express-validator/src/select-fields.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.selectFields = void 0;\nconst _ = require(\"lodash\");\nexports.selectFields = (req, fields, locations) => _(fields)\n    .flatMap(field => _.flatMap(locations, location => {\n    return expandField(req, field, location);\n}))\n    // Avoid duplicates if multiple field selections would return the same field twice.\n    // E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n    // the instance bla.foo would appear twice, and baz.foo once.\n    .uniqWith(isSameFieldInstance)\n    .value();\nfunction isSameFieldInstance(a, b) {\n    return a.path === b.path && a.location === b.location;\n}\nfunction expandField(req, field, location) {\n    const originalPath = field;\n    const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n    const paths = [];\n    expandPath(req[location], pathToExpand, paths);\n    return paths.map(path => {\n        const value = path === '' ? req[location] : _.get(req[location], path);\n        return {\n            location,\n            path,\n            originalPath,\n            value,\n            originalValue: value,\n        };\n    });\n}\nfunction expandPath(object, path, accumulator) {\n    const segments = _.toPath(path);\n    const wildcardPos = segments.indexOf('*');\n    if (wildcardPos > -1) {\n        const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n        if (!subObject || !_.isObjectLike(subObject)) {\n            return;\n        }\n        Object.keys(subObject)\n            .map(key => segments\n            // Before the *\n            .slice(0, wildcardPos)\n            // The part that the * matched\n            .concat(key)\n            // After the *\n            .concat(segments.slice(wildcardPos + 1)))\n            .forEach(subPath => {\n            expandPath(object, subPath, accumulator);\n        });\n    }\n    else {\n        const reconstructedPath = segments.reduce((prev, segment) => {\n            let part = '';\n            // TODO: Handle brackets?\n            if (segment.includes('.')) {\n                // Special char key access\n                part = `[\"${segment}\"]`;\n            }\n            else if (/^\\d+$/.test(segment)) {\n                // Index access\n                part = `[${segment}]`;\n            }\n            else if (prev) {\n                // Object key access\n                part = `.${segment}`;\n            }\n            else {\n                // Top level key\n                part = segment;\n            }\n            return prev + part;\n        }, '');\n        accumulator.push(reconstructedPath);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}